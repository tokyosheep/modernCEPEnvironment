{"version":3,"file":"transpiled.js","mappings":";;;;;;;;;;;;;;;AAEA;;;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAMA,SAA4D,GAAG,SAA/DA,SAA+D,CAAAC,SAAS,EAAI;EAChF,IAAMC,MAAkB,GAAG,EAA3B;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAeA,CAAC,GAAGF,SAAS,CAACC,MAAV,CAAiBE,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;IAC/CD,MAAM,CAACC,CAAD,CAAN,GAAY;MACRE,IAAI,EAAE,OADE;MAERC,IAAI,EAAEL,SAAS,CAACC,MAAV,CAAiBC,CAAjB,EAAoBG;IAFlB,CAAZ;EAID;;EAAA;EACD,OAAOJ,MAAP;AACD,CATD;AAWA;AACA;AACA;AACA;;;AACA,IAAMK,eAAkC,GAAG,SAArCA,eAAqC,GAAM;EAC/C,IAAMC,IAAmB,GAAG,EAA5B;EACA,IAAMC,SAAS,GAAGC,GAAG,CAACD,SAAtB;;EACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAeA,CAAC,GAAGF,SAAS,CAACL,MAA7B,EAAqCO,CAAC,EAAtC,EAA0C;IACxCD,GAAG,CAACE,cAAJ,GAAqBH,SAAS,CAACE,CAAD,CAA9B;;IACAE,eAAA,CAAOC,GAAP,CAAWJ,GAAG,CAACE,cAAJ,CAAmBN,IAA9B;;IACAE,IAAI,CAACG,CAAD,CAAJ,GAAU;MACNN,IAAI,EAAE,UADA;MAENC,IAAI,EAAEI,GAAG,CAACE,cAAJ,CAAmBN,IAFnB;MAGNJ,MAAM,EAAEF,SAAS,CAACU,GAAG,CAACE,cAAL;IAHX,CAAV;EAKD;;EAAA;EACD,OAAOJ,IAAP;AACD,CAbD;;eAeeD;;;;;;;;;;;;;;;;;ACvCf;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA,IAAMM,MAAM,GAAG;EACbC,GAAG,EAAE,aAAUC,CAAV,EAAiC;IACpC,IAAIC,IAAJ,EAAW;MACT,IAAIC,KAAK,CAACC,OAAN,CAAcH,CAAd,CAAJ,EAAsB;QACpBA,CAAC,CAACI,OAAF,CAAU,UAAAC,CAAC,EAAI;UACbC,CAAC,CAACC,OAAF,CAAUF,CAAV;QACD,CAFD;MAGD,CAJD,MAIO;QACLC,CAAC,CAACC,OAAF,CAAUP,CAAV;MACD;IACF;EACF,CAXY;;EAYb;AACF;AACA;AACA;AACA;AACA;AACA;EACEQ,UAAU,EAAE,oBAAUC,GAAV,EAAsB;IAChC,IAAIR,IAAJ,EAAW;MACT,KAAK,IAAMS,CAAX,IAAgBD,GAAhB,EAAqB;QACnB,IAAI;UACFH,CAAC,CAACC,OAAF,CAAU,UAAUG,CAApB;UACAJ,CAAC,CAACC,OAAF,CAAU,YAAYE,GAAG,CAACC,CAAD,CAAzB;QACD,CAHD,CAGE,OAAOC,CAAP,EAAU;UACVL,CAAC,CAACC,OAAF,CAAUI,CAAV;QACD;MACF;IACF;EACF;AA9BY,CAAf;eAiCeb;;;;;;;;;;;AC7Cf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;;;AAGA;AACA;;AAEA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gEAAgE,QAAQ;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;;AAEA;AACA;AACA;AACA;;AAEA,oBAAoB,SAAS;;AAE7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;;AAGtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAgB;AACxyEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,yCAAyC,iBAAiB;AAC1D,8BAA8B,kBAAkB;;AAEhD,yCAAyC,iBAAiB;AAC1D,sCAAsC,6BAA6B;;AAEnE;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,0BAA0B;AAC1B,iDAAiD,EAAE;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;;AAGA;;AAEA;;AAEA,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AACxB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,4BAA4B,YAAY;AACxC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA,wBAAwB,wDAAwD;AAChF,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;;AAEA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4BAA4B,WAAW;AACvC;AACA;;AAEA;;AAEA,cAAc;AACd;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,4BAA4B,UAAU;AACtC;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,4BAA4B,MAAM;AAClC;AACA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;AC73CD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,yCAAyC,iBAAiB;AAC1D,8BAA8B,kBAAkB;;AAEhD,yCAAyC,iBAAiB;AAC1D,sCAAsC,6BAA6B;;AAEnE;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,0BAA0B;AAC1B,iDAAiD,EAAE;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;;AAGA;;AAEA;;AAEA,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AACxB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,4BAA4B,YAAY;AACxC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA,wBAAwB,wDAAwD;AAChF,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;;AAEA;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4BAA4B,WAAW;AACvC;AACA;;AAEA;;AAEA,cAAc;AACd;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,4BAA4B,UAAU;AACtC;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,4BAA4B,MAAM;AAClC;AACA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;;;;;ACzfD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,IAAI,KAA6B;AACjC;AACA;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UCpBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;;;ACtBA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAH8B;AAK9BA,eAAA,CAAOC,GAAP,CAAW,OAAX;;AAEA,IAAMa,QAA2B,GAAG,SAA9BA,QAA8B,CAACC,GAAD,EAAS;EACzCf,eAAA,CAAOC,GAAP,CAAW,UAAX;;EACAe,KAAK,CAACD,GAAD,CAAL;AACH,CAHD;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAME,WAA+C,GAAG,SAAlDA,WAAkD,CAAAC,GAAG,EAAI;EAC7DlB,eAAA,CAAOC,GAAP,CAAWiB,GAAG,CAACC,IAAf;;EACA,QAAOD,GAAG,CAACC,IAAX;IACE,KAAK,UAAL;MACEL,QAAQ,CAACI,GAAG,CAACH,GAAL,CAAR;MACA,OAAO,IAAP;;IAEF,KAAK,cAAL;MACE,OAAOK,IAAI,CAACC,SAAL,CAAe,IAAA3B,wBAAA,GAAf,CAAP;;IAEF;MACE,OAAO,KAAP;EATJ;AAWD,CAbD;AAeA;AACA;AACA;AACA;;;AACA,IAAM4B,WAAW,GAAG,SAAdA,WAAc,CAACP,GAAD,EAAS;EAC3BP,CAAC,CAACe,KAAF,GAAU,CAAV;;EACAvB,eAAA,CAAOC,GAAP,CAAW,OAAX;;EACAD,eAAA,CAAOC,GAAP,CAAWc,GAAX;;EACAC,KAAK,CAAC,UAAD,CAAL;AACD,CALD;;AAOA,IAAMQ,IAAI,GAAG,SAAPA,IAAO,GAAM;EACjB,IAAMjB,CAAC,GAAG,GAAV;;EACAP,eAAA,CAAOC,GAAP,CAAW,GAAX;;EACAD,eAAA,CAAOC,GAAP,CAAWM,CAAC,CAACkB,QAAF,CAAW,CAAX,EAAc,GAAd,CAAX;;EACAzB,eAAA,CAAOC,GAAP,CAAWyB,IAAI,CAACC,KAAL,CAAW,OAAX,CAAX;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;;;AACAnB,CAAC,CAACoB,MAAF,CAASN,WAAT,GAAuBA,WAAvB;AACAd,CAAC,CAACoB,MAAF,CAASX,WAAT,GAAuBA,WAAvB;AACAT,CAAC,CAACoB,MAAF,CAASJ,IAAT,GAAgBA,IAAhB,C","sources":["webpack://extendscript2015/./src/getDocuments.ts","webpack://extendscript2015/./src/log.ts","webpack://extendscript2015/./node_modules/extendscript-es5-shim/index.js","webpack://extendscript2015/./polyfill/json2.js","webpack://extendscript2015/./polyfill/padStart.js","webpack://extendscript2015/./polyfill/trunc.js","webpack://extendscript2015/webpack/bootstrap","webpack://extendscript2015/./src/main.ts"],"sourcesContent":["import { DocumentType } from '../../src/redux/types/documentType';\nimport { LayerType } from '../../src/redux/types/documentType';\nimport report from './log';\n\n/**\n * @param activeDoc \n * @returns {LayerType[]}\n * getting layers name\n */\nconst getLayers:(activeDoc:typeof app.activeDocument)=>LayerType[] = activeDoc => {\n  const layers:LayerType[] = [];\n  for (let l = 0;l < activeDoc.layers.length; l++) {\n    layers[l] = {\n        type: 'layer',\n        name: activeDoc.layers[l].name\n    };\n  };\n  return layers;\n};\n\n/**\n * getting documents and layers data on Illustrator\n * @returns {DocumentType[]}\n */\nconst getDocumentData:()=>DocumentType[] = () => {\n  const docs:DocumentType[] = [];\n  const documents = app.documents;\n  for (let i = 0;i < documents.length; i++) {\n    app.activeDocument = documents[i];\n    report.log(app.activeDocument.name);\n    docs[i] = {\n        type: 'document',\n        name: app.activeDocument.name,\n        layers: getLayers(app.activeDocument)\n    };\n  };\n  return docs;\n};\n\nexport default getDocumentData;\n","/**\n * this is console method\n * I use this instead of directoly using $.writeln method \n */\n\ntype DebugArg = number|string|Object;\n\n/**\n * console method\n * DEBUG variable has true value when you develop under development environment.\n * but once you finished and switched to production environment, it never calls $.writeln method.\n */\nconst report = {\n  log: function (v:DebugArg|DebugArg[]) {\n    if (DEBUG) {\n      if (Array.isArray(v)) {\n        v.forEach(n => {\n          $.writeln(n);\n        });\n      } else {\n        $.writeln(v);\n      }\n    }\n  },\n  /**\n   * \n   * @param {Object} obj anything Object you want to inspect\n   * inspecting object properties. ExtendScript doen't show all of properties like google chrome devetool\n   * just showing Object as [Object object]\n   * this method inspects all of properties\n   */\n  inspectObj: function (obj:Object) {\n    if (DEBUG) {\n      for (const p in obj) {\n        try {\n          $.writeln('key :' + p);\n          $.writeln('value :' + obj[p]);\n        } catch (e) {\n          $.writeln(e);\n        }\n      }\n    }\n  }\n};\n\nexport default report;\n","//filter.js\n/*\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n*/\nif (!Array.prototype.filter) {\n  Array.prototype.filter = function(callback, thisArg) {\n\n    if (this === void 0 || this === null) {\n      throw new TypeError('Array.prototype.filter called on null or undefined');\n    }\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n\n    if (callback.__class__ !== 'Function') {\n      throw new TypeError(callback + ' is not a function');\n    }\n\n    var res = [];\n\n    var T = (arguments.length > 1) ? thisArg : void 0;\n    \n    for (var i = 0; i < len; i++) {\n      if (i in t) {\n        var val = t[i];\n\n        // NOTE: Technically this should Object.defineProperty at\n        //       the next index, as push can be affected by\n        //       properties on Object.prototype and Array.prototype.\n        //       But that method's new, and collisions should be\n        //       rare, so use the more-compatible alternative.\n        if (callback.call(T, val, i, t)) {\n          res.push(val);\n        }\n      }\n    }\n\n    return res;\n  };\n}\n//every.js\n/*\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n*/\nif (!Array.prototype.every) {\n  Array.prototype.every = function(callback, thisArg) {\n    var T, k;\n\n    if (this === void 0 || this === null) {\n      throw new TypeError('Array.prototype.every called on null or undefined');\n    }\n\n    // 1. Let O be the result of calling ToObject passing the this \n    //    value as the argument.\n    var O = Object(this);\n\n    // 2. Let lenValue be the result of calling the Get internal method\n    //    of O with the argument \"length\".\n    // 3. Let len be ToUint32(lenValue).\n    var len = O.length >>> 0;\n\n    // 4. If IsCallable(callback) is false, throw a TypeError exception.\n    if (callback.__class__ !== 'Function') {\n      throw new TypeError(callback + ' is not a function');\n    }\n\n    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    T = (arguments.length > 1) ? thisArg : void 0;\n\n    // 6. Let k be 0.\n    k = 0;\n\n    // 7. Repeat, while k < len\n    while (k < len) {\n\n      var kValue;\n\n      // a. Let Pk be ToString(k).\n      //   This is implicit for LHS operands of the in operator\n      // b. Let kPresent be the result of calling the HasProperty internal \n      //    method of O with argument Pk.\n      //   This step can be combined with c\n      // c. If kPresent is true, then\n      if (k in O) {\n\n        // i. Let kValue be the result of calling the Get internal method\n        //    of O with argument Pk.\n        kValue = O[k];\n\n        // ii. Let testResult be the result of calling the Call internal method\n        //     of callback with T as the this value and argument list \n        //     containing kValue, k, and O.\n        var testResult = callback.call(T, kValue, k, O);\n\n        // iii. If ToBoolean(testResult) is false, return false.\n        if (!testResult) {\n          return false;\n        }\n      }\n      k++;\n    }\n    return true;\n  };\n}\n//indexOf.js\n/*\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill\n*/\n// Production steps of ECMA-262, Edition 5, 15.4.4.14\n// Reference: http://es5.github.io/#x15.4.4.14\nif (!Array.prototype.indexOf) {\n  Array.prototype.indexOf = function(searchElement, fromIndex) {\n\n\n    // 1. Let o be the result of calling ToObject passing\n    //    the this value as the argument.\n    if (this === void 0 || this === null) {\n      throw new TypeError('Array.prototype.indexOf called on null or undefined');\n    }\n\n    var k;\n    var o = Object(this);\n\n    // 2. Let lenValue be the result of calling the Get\n    //    internal method of o with the argument \"length\".\n    // 3. Let len be ToUint32(lenValue).\n    var len = o.length >>> 0;\n\n    // 4. If len is 0, return -1.\n    if (len === 0) {\n      return -1;\n    }\n\n    // 5. If argument fromIndex was passed let n be\n    //    ToInteger(fromIndex); else let n be 0.\n    var n = +fromIndex || 0;\n\n    if (Math.abs(n) === Infinity) {\n      n = 0;\n    }\n\n    // 6. If n >= len, return -1.\n    if (n >= len) {\n      return -1;\n    }\n\n    // 7. If n >= 0, then Let k be n.\n    // 8. Else, n<0, Let k be len - abs(n).\n    //    If k is less than 0, then let k be 0.\n    k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n    // 9. Repeat, while k < len\n    while (k < len) {\n      // a. Let Pk be ToString(k).\n      //   This is implicit for LHS operands of the in operator\n      // b. Let kPresent be the result of calling the\n      //    HasProperty internal method of o with argument Pk.\n      //   This step can be combined with c\n      // c. If kPresent is true, then\n      //    i.  Let elementK be the result of calling the Get\n      //        internal method of o with the argument ToString(k).\n      //   ii.  Let same be the result of applying the\n      //        Strict Equality Comparison Algorithm to\n      //        searchElement and elementK.\n      //  iii.  If same is true, return k.\n      if (k in o && o[k] === searchElement) {\n        return k;\n      }\n      k++;\n    }\n    return -1;\n  };\n}\n//isArray.js\n/*\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n*/\nif (!Array.isArray) {\n  Array.isArray = function(arg) {\n\n    if (arg === void 0 || arg === null) {\n      return false;\n    }\n  \treturn (arg.__class__ === 'Array');\n  };\n}\n//forEach.js\n/*\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n*/\n// Production steps of ECMA-262, Edition 5, 15.4.4.18\n// Reference: http://es5.github.io/#x15.4.4.18\nif (!Array.prototype.forEach) {\n    Array.prototype.forEach = function(callback, thisArg) {\n\n\n        if (this === void 0 || this === null) {\n            throw new TypeError('Array.prototype.forEach called on null or undefined');\n        }\n\n        // 1. Let O be the result of calling toObject() passing the\n        // |this| value as the argument.\n        var O = Object(this);\n\n        // 2. Let lenValue be the result of calling the Get() internal\n        // method of O with the argument \"length\".\n        // 3. Let len be toUint32(lenValue).\n        var len = O.length >>> 0;\n\n        // 4. If isCallable(callback) is false, throw a TypeError exception. \n        // See: http://es5.github.com/#x9.11\n        if (callback.__class__ !== 'Function') {\n            throw new TypeError(callback + ' is not a function');\n        }\n\n        // 5. If thisArg was supplied, let T be thisArg; else let\n        // T be undefined.\n        var T = (arguments.length > 1) ? thisArg : void 0;\n\n\n        // 6. Let k be 0\n        //k = 0;\n\n        // 7. Repeat, while k < len\n        for (var k = 0; k < len; k++) {\n            var kValue;\n            // a. Let Pk be ToString(k).\n            //    This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty\n            //    internal method of O with argument Pk.\n            //    This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n                // i. Let kValue be the result of calling the Get internal\n                // method of O with argument Pk.\n                kValue = O[k];\n                // ii. Call the Call internal method of callback with T as\n                // the this value and argument list containing kValue, k, and O.\n                callback.call(T, kValue, k, O);\n            }\n        }\n        // 8. return undefined\n    }\n}\n//lastIndexOf.js\n/*\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\n*/\n// Production steps of ECMA-262, Edition 5, 15.4.4.15\n// Reference: http://es5.github.io/#x15.4.4.15\nif (!Array.prototype.lastIndexOf) {\n  Array.prototype.lastIndexOf = function(searchElement, fromIndex) {\n\n    if (this === void 0 || this === null) {\n      throw new TypeError('Array.prototype.lastIndexOf called on null or undefined');\n    }\n\n    var n, k,\n      t = Object(this),\n      len = t.length >>> 0;\n    if (len === 0) {\n      return -1;\n    }\n\n    n = len - 1;\n    if (arguments.length > 1) {\n      n = Number(arguments[1]);\n      if (n != n) {\n        n = 0;\n      }\n      else if (n != 0 && n != Infinity && n != -Infinity) {\n        n = (n > 0 || -1) * Math.floor(Math.abs(n));\n      }\n    }\n\n    for (k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n); k >= 0; k--) {\n      if (k in t && t[k] === searchElement) {\n        return k;\n      }\n    }\n    return -1;\n  };\n}\n//map.js\n/*\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n*/\n// Production steps of ECMA-262, Edition 5, 15.4.4.19\n// Reference: http://es5.github.io/#x15.4.4.19\nif (!Array.prototype.map) {\n\n  Array.prototype.map = function(callback, thisArg) {\n\n    var T, A, k;\n\n    if (this === void 0 || this === null) {\n      throw new TypeError('Array.prototype.map called on null or undefined');\n    }\n\n    // 1. Let O be the result of calling ToObject passing the |this| \n    //    value as the argument.\n    var O = Object(this);\n\n    // 2. Let lenValue be the result of calling the Get internal \n    //    method of O with the argument \"length\".\n    // 3. Let len be ToUint32(lenValue).\n    var len = O.length >>> 0;\n\n    // 4. If IsCallable(callback) is false, throw a TypeError exception.\n    // See: http://es5.github.com/#x9.11\n    if (callback.__class__ !== 'Function') {\n      throw new TypeError(callback + ' is not a function');\n    }\n\n    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    T = (arguments.length > 1) ? thisArg : void 0;\n\n    // 6. Let A be a new array created as if by the expression new Array(len) \n    //    where Array is the standard built-in constructor with that name and \n    //    len is the value of len.\n    A = new Array(len);\n\n    for (var k = 0; k < len; k++) {\n\n      var kValue, mappedValue;\n\n      // a. Let Pk be ToString(k).\n      //   This is implicit for LHS operands of the in operator\n      // b. Let kPresent be the result of calling the HasProperty internal \n      //    method of O with argument Pk.\n      //   This step can be combined with c\n      // c. If kPresent is true, then\n      if (k in O) {\n\n        // i. Let kValue be the result of calling the Get internal \n        //    method of O with argument Pk.\n        kValue = O[k];\n\n        // ii. Let mappedValue be the result of calling the Call internal \n        //     method of callback with T as the this value and argument \n        //     list containing kValue, k, and O.\n        mappedValue = callback.call(T, kValue, k, O);\n\n        // iii. Call the DefineOwnProperty internal method of A with arguments\n        // Pk, Property Descriptor\n        // { Value: mappedValue,\n        //   Writable: true,\n        //   Enumerable: true,\n        //   Configurable: true },\n        // and false.\n\n        // In browsers that support Object.defineProperty, use the following:\n        // Object.defineProperty(A, k, {\n        //   value: mappedValue,\n        //   writable: true,\n        //   enumerable: true,\n        //   configurable: true\n        // });\n\n        // For best browser support, use the following:\n        A[k] = mappedValue;\n      }\n    }\n    // 9. return A\n    return A;\n  };\n}\n//reduce.js\n/*\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\n*/\n// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: http://es5.github.io/#x15.4.4.21\nif (!Array.prototype.reduce) {\n  Array.prototype.reduce = function(callback, initialValue) {\n\n    if (this === void 0 || this === null) {\n      throw new TypeError('Array.prototype.reduce called on null or undefined');\n    }\n\n    if (callback.__class__ !== 'Function') {\n      throw new TypeError(callback + ' is not a function');\n    }\n\n    var t = Object(this), len = t.length >>> 0, k = 0, value;\n\n    if (arguments.length > 1) \n      {\n        value = initialValue;\n      } \n    else \n      {\n        while (k < len && !(k in t)) {\n          k++; \n        }\n        if (k >= len) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n        value = t[k++];\n      }\n\n    for (; k < len; k++) {\n      if (k in t) {\n        value = callback(value, t[k], k, t);\n      }\n    }\n    return value;\n  };\n}\n//some.js\n/*\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n*/\n// Production steps of ECMA-262, Edition 5, 15.4.4.17\n// Reference: http://es5.github.io/#x15.4.4.17\nif (!Array.prototype.some) {\n  Array.prototype.some = function(callback, thisArg) {\n\n    if (this === void 0 || this === null) {\n      throw new TypeError('Array.prototype.some called on null or undefined');\n    }\n\n    if (callback.__class__ !== 'Function') {\n      throw new TypeError(callback + ' is not a function');\n    }\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n\n    var T = arguments.length > 1 ? thisArg : void 0;\n    for (var i = 0; i < len; i++) {\n      if (i in t && callback.call(T, t[i], i, t)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n}\n//reduceRight.js\n/*\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight\n*/\n// Production steps of ECMA-262, Edition 5, 15.4.4.22\n// Reference: http://es5.github.io/#x15.4.4.22\nif (!Array.prototype.reduceRight) {\n  Array.prototype.reduceRight = function(callback, initialValue) {\n\n    if (this === void 0 || this === null) {\n      throw new TypeError('Array.prototype.reduceRight called on null or undefined');\n    }\n\n    if (callback.__class__ !== 'Function') {\n      throw new TypeError(callback + ' is not a function');\n    }\n\n    var t = Object(this), len = t.length >>> 0, k = len - 1, value;\n    if (arguments.length > 1) \n      {\n        value = initialValue;\n      } \n    else \n      {\n        while (k >= 0 && !(k in t)) {\n          k--;\n        }\n        if (k < 0) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n        value = t[k--];\n      }\n      \n    for (; k >= 0; k--) {\n      if (k in t) {\n        value = callback(value, t[k], k, t);\n      }\n    }\n    return value;\n  };\n}\n//bind.js\n/*\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Polyfill\n\nWARNING! Bound functions used as constructors NOT supported by this polyfill!\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Bound_functions_used_as_constructors\n*/\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function(oThis) {\n    if (this.__class__ !== 'Function') {\n      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n    }\n\n    var aArgs   = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP    = function() {},\n        fBound  = function() {\n          return fToBind.apply(this instanceof fNOP\n                 ? this\n                 : oThis,\n                 aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    if (this.prototype) {\n      // Function.prototype doesn't have a prototype property\n      fNOP.prototype = this.prototype; \n    }\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n//create.js\nif (!Object.create) {\n  // Production steps of ECMA-262, Edition 5, 15.2.3.5\n  // Reference: http://es5.github.io/#x15.2.3.5\n  Object.create = (function() {\n    // To save on memory, use a shared constructor\n    function Temp() {}\n\n    // make a safe reference to Object.prototype.hasOwnProperty\n    var hasOwn = Object.prototype.hasOwnProperty;\n\n    return function(O) {\n      // 1. If Type(O) is not Object or Null throw a TypeError exception.\n      if (Object(O) !== O && O !== null) {\n        throw TypeError('Object prototype may only be an Object or null');\n      }\n\n      // 2. Let obj be the result of creating a new object as if by the\n      //    expression new Object() where Object is the standard built-in\n      //    constructor with that name\n      // 3. Set the [[Prototype]] internal property of obj to O.\n      Temp.prototype = O;\n      var obj = new Temp();\n      Temp.prototype = null; // Let's not keep a stray reference to O...\n\n      // 4. If the argument Properties is present and not undefined, add\n      //    own properties to obj as if by calling the standard built-in\n      //    function Object.defineProperties with arguments obj and\n      //    Properties.\n      if (arguments.length > 1) {\n        // Object.defineProperties does ToObject on its first argument.\n        var Properties = Object(arguments[1]);\n        for (var prop in Properties) {\n          if (hasOwn.call(Properties, prop)) {\n            var descriptor = Properties[prop];\n            if (Object(descriptor) !== descriptor) {\n              throw TypeError(prop + 'must be an object');\n            }\n            if ('get' in descriptor || 'set' in descriptor) {\n              throw new TypeError('getters & setters can not be defined on this javascript engine');\n            }\n            if ('value' in descriptor) {\n              obj[prop] = Properties[prop].value;\n            }\n\n          }\n        }\n      }\n\n      // 5. Return obj\n      return obj;\n    };\n  })();\n}\n\n//defineProperties.js\n/*\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties#Polyfill\n*/\nif (!Object.defineProperties) {\n\n  Object.defineProperties = function(object, props) {\n\n    function hasProperty(obj, prop) {\n      return Object.prototype.hasOwnProperty.call(obj, prop);\n    }\n\n    function convertToDescriptor(desc) {\n\n      if (Object(desc) !== desc) {\n        throw new TypeError('Descriptor can only be an Object.');\n      }\n\n\n      var d = {};\n\n      if (hasProperty(desc, \"enumerable\")) {\n        d.enumerable = !!desc.enumerable;\n      }\n\n      if (hasProperty(desc, \"configurable\")) {\n        d.configurable = !!desc.configurable;\n      }\n\n      if (hasProperty(desc, \"value\")) {\n        d.value = desc.value;\n      }\n\n      if (hasProperty(desc, \"writable\")) {\n        d.writable = !!desc.writable;\n      }\n\n      if (hasProperty(desc, \"get\")) {\n        throw new TypeError('getters & setters can not be defined on this javascript engine');\n      }\n\n      if (hasProperty(desc, \"set\")) {\n        throw new TypeError('getters & setters can not be defined on this javascript engine');\n      }\n\n      return d;\n    }\n\n    if (Object(object) !== object) {\n      throw new TypeError('Object.defineProperties can only be called on Objects.');\n    }\n\n    if (Object(props) !== props) {\n      throw new TypeError('Properties can only be an Object.');\n    }\n\n    var properties = Object(props);\n    for (propName in properties) {\n      if (hasOwnProperty.call(properties, propName)) {\n        var descr = convertToDescriptor(properties[propName]);\n        object[propName] = descr.value;\n      }\n    }\n    return object;\n  }\n}\n//defineProperty.js\nif (!Object.defineProperty) {\n\n    Object.defineProperty = function defineProperty(object, property, descriptor) {\n\n        if (Object(object) !== object) {\n            throw new TypeError('Object.defineProperty can only be called on Objects.');\n        }\n\n        if (Object(descriptor) !== descriptor) {\n            throw new TypeError('Property description can only be an Object.');\n        }\n\n        if ('get' in descriptor || 'set' in descriptor) {\n            throw new TypeError('getters & setters can not be defined on this javascript engine');\n        }\n        // If it's a data property.\n        if ('value' in descriptor) {\n            // fail silently if 'writable', 'enumerable', or 'configurable'\n            // are requested but not supported\n            // can't implement these features; allow true but not false\n            /* if ( \n                     ('writable' in descriptor && !descriptor.writable) ||\n                     ('enumerable' in descriptor && !descriptor.enumerable) ||\n                     ('configurable' in descriptor && !descriptor.configurable)\n                 )\n                     {\n                         throw new RangeError('This implementation of Object.defineProperty does not support configurable, enumerable, or writable properties SET to FALSE.');\n                     }*/\n\n\n            object[property] = descriptor.value;\n        }\n        return object;\n    }\n}\n//freeze.js\n/*\nhttps://github.com/es-shims/es5-shim/blob/master/es5-sham.js\n*/\n// ES5 15.2.3.9\n// http://es5.github.com/#x15.2.3.9\nif (!Object.freeze) {\n    Object.freeze = function freeze(object) {\n        if (Object(object) !== object) {\n            throw new TypeError('Object.freeze can only be called on Objects.');\n        }\n        // this is misleading and breaks feature-detection, but\n        // allows \"securable\" code to \"gracefully\" degrade to working\n        // but insecure code.\n        return object;\n    };\n}\n//getOwnPropertyDescriptor.js\nif (!Object.getOwnPropertyDescriptor) {\n\n    Object.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {\n        if (Object(object) !== object) {\n            throw new TypeError('Object.getOwnPropertyDescriptor can only be called on Objects.');\n        }\n\n        var descriptor;\n        if (!Object.prototype.hasOwnProperty.call(object, property)) {\n            return descriptor;\n        }\n\n        descriptor = {\n            enumerable: Object.prototype.propertyIsEnumerable.call(object, property),\n            configurable: true\n        };\n\n        descriptor.value = object[property];\n\n        var psPropertyType = object.reflect.find(property).type;\n        descriptor.writable = !(psPropertyType === \"readonly\");\n\n        return descriptor;\n    }\n}\n//getOwnPropertyNames.js\nif (!Object.getOwnPropertyNames) {\n    Object.getOwnPropertyNames = function getOwnPropertyNames(object) {\n\n        if (Object(object) !== object) {\n            throw new TypeError('Object.getOwnPropertyNames can only be called on Objects.');\n        }\n        var names = [];\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var propertyIsEnumerable = Object.prototype.propertyIsEnumerable;\n        for (var prop in object) {\n            if (hasOwnProperty.call(object, prop)) {\n                names.push(prop);\n            }\n        }\n        var properties = object.reflect.properties;\n        var methods = object.reflect.methods;\n        var all = methods.concat(properties);\n        for (var i = 0; i < all.length; i++) {\n            var prop = all[i].name;\n            if (hasOwnProperty.call(object, prop) && !(propertyIsEnumerable.call(object, prop))) {\n                names.push(prop);\n            }\n        }\n        return names;\n    };\n}\n//getPrototypeOf.js\nif (!Object.getPrototypeOf) {\n\tObject.getPrototypeOf = function(object) {\n\t\tif (Object(object) !== object) {\n\t\t\tthrow new TypeError('Object.getPrototypeOf can only be called on Objects.');\n\t\t}\n\t\treturn object.__proto__;\n\t}\n}\n//isExtensible.js\n// ES5 15.2.3.13\n// http://es5.github.com/#x15.2.3.13\nif (!Object.isExtensible) {\n    Object.isExtensible = function isExtensible(object) {\n        if (Object(object) !== object) {\n            throw new TypeError('Object.isExtensible can only be called on Objects.');\n        }\n        return true;\n    };\n}\n//isFrozen.js\n/*\nhttps://github.com/es-shims/es5-shim/blob/master/es5-sham.js\n*/\n// ES5 15.2.3.12\n// http://es5.github.com/#x15.2.3.12\nif (!Object.isFrozen) {\n    Object.isFrozen = function isFrozen(object) {\n        if (Object(object) !== object) {\n            throw new TypeError('Object.isFrozen can only be called on Objects.');\n        }\n        return false;\n    };\n}\n//isSealed.js\n/*\nhttps://github.com/es-shims/es5-shim/blob/master/es5-sham.js\n*/\n// ES5 15.2.3.11\n// http://es5.github.com/#x15.2.3.11\nif (!Object.isSealed) {\n    Object.isSealed = function isSealed(object) {\n        if (Object(object) !== object) {\n            throw new TypeError('Object.isSealed can only be called on Objects.');\n        }\n        return false;\n    };\n}\n//preventExtensions.js\n/*\nhttps://github.com/es-shims/es5-shim/blob/master/es5-sham.js\n*/\n// ES5 15.2.3.10\n// http://es5.github.com/#x15.2.3.10\nif (!Object.preventExtensions) {\n    Object.preventExtensions = function preventExtensions(object) {\n\n        if (Object(object) !== object) {\n            throw new TypeError('Object.preventExtensions can only be called on Objects.');\n        }\n        // this is misleading and breaks feature-detection, but\n        // allows \"securable\" code to \"gracefully\" degrade to working\n        // but insecure code.\n        return object;\n    };\n}\n//toISOString.js\n/*\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\r\n*/\r\nif (!Date.prototype.toISOString) {\r\n  (function() {\r\n\r\n    function pad(number) {\r\n      if (number < 10) {\r\n        return '0' + number;\r\n      }\r\n      return number;\r\n    }\r\n\r\n    Date.prototype.toISOString = function() {\r\n      return this.getUTCFullYear() +\r\n        '-' + pad(this.getUTCMonth() + 1) +\r\n        '-' + pad(this.getUTCDate()) +\r\n        'T' + pad(this.getUTCHours()) +\r\n        ':' + pad(this.getUTCMinutes()) +\r\n        ':' + pad(this.getUTCSeconds()) +\r\n        '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\r\n        'Z';\r\n    };\r\n\r\n  }());\r\n}\n//keys.js\nif (!Object.keys) {\n    Object.keys = function(object) {\n        if (Object(object) !== object) {\n            throw new TypeError('Object.keys can only be called on Objects.');\n        }\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var result = [];\n        for (var prop in object) {\n            if (hasOwnProperty.call(object, prop)) {\n                result.push(prop);\n            }\n        }\n        return result;\n    };\n}\n//seal.js\n/*\nhttps://github.com/es-shims/es5-shim/blob/master/es5-sham.js\n*/\n// ES5 15.2.3.8\n// http://es5.github.com/#x15.2.3.8\nif (!Object.seal) {\n    Object.seal = function seal(object) {\n        if (Object(object) !== object) {\n            throw new TypeError('Object.seal can only be called on Objects.');\n        }\n        // this is misleading and breaks feature-detection, but\n        // allows \"securable\" code to \"gracefully\" degrade to working\n        // but insecure code.\n        return object;\n    };\n}\n//trim.js\n/*\nhttps://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\n*/\nif (!String.prototype.trim) {\n\t// Вырезаем BOM и неразрывный пробел\n\tString.prototype.trim = function() {\n\t\treturn this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\t};\n}\n//json2.js\n//  json2.js\n//  2017-06-12\n//  Public Domain.\n//  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\n//  USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n//  NOT CONTROL.\n\n//  This file creates a global JSON object containing two methods: stringify\n//  and parse. This file provides the ES5 JSON capability to ES3 systems.\n//  If a project might run on IE8 or earlier, then this file should be included.\n//  This file does nothing on ES5 systems.\n\n//      JSON.stringify(value, replacer, space)\n//          value       any JavaScript value, usually an object or array.\n//          replacer    an optional parameter that determines how object\n//                      values are stringified for objects. It can be a\n//                      function or an array of strings.\n//          space       an optional parameter that specifies the indentation\n//                      of nested structures. If it is omitted, the text will\n//                      be packed without extra whitespace. If it is a number,\n//                      it will specify the number of spaces to indent at each\n//                      level. If it is a string (such as \"\\t\" or \"&nbsp;\"),\n//                      it contains the characters used to indent at each level.\n//          This method produces a JSON text from a JavaScript value.\n//          When an object value is found, if the object contains a toJSON\n//          method, its toJSON method will be called and the result will be\n//          stringified. A toJSON method does not serialize: it returns the\n//          value represented by the name/value pair that should be serialized,\n//          or undefined if nothing should be serialized. The toJSON method\n//          will be passed the key associated with the value, and this will be\n//          bound to the value.\n\n//          For example, this would serialize Dates as ISO strings.\n\n//              Date.prototype.toJSON = function (key) {\n//                  function f(n) {\n//                      // Format integers to have at least two digits.\n//                      return (n < 10)\n//                          ? \"0\" + n\n//                          : n;\n//                  }\n//                  return this.getUTCFullYear()   + \"-\" +\n//                       f(this.getUTCMonth() + 1) + \"-\" +\n//                       f(this.getUTCDate())      + \"T\" +\n//                       f(this.getUTCHours())     + \":\" +\n//                       f(this.getUTCMinutes())   + \":\" +\n//                       f(this.getUTCSeconds())   + \"Z\";\n//              };\n\n//          You can provide an optional replacer method. It will be passed the\n//          key and value of each member, with this bound to the containing\n//          object. The value that is returned from your method will be\n//          serialized. If your method returns undefined, then the member will\n//          be excluded from the serialization.\n\n//          If the replacer parameter is an array of strings, then it will be\n//          used to select the members to be serialized. It filters the results\n//          such that only members with keys listed in the replacer array are\n//          stringified.\n\n//          Values that do not have JSON representations, such as undefined or\n//          functions, will not be serialized. Such values in objects will be\n//          dropped; in arrays they will be replaced with null. You can use\n//          a replacer function to replace those with JSON values.\n\n//          JSON.stringify(undefined) returns undefined.\n\n//          The optional space parameter produces a stringification of the\n//          value that is filled with line breaks and indentation to make it\n//          easier to read.\n\n//          If the space parameter is a non-empty string, then that string will\n//          be used for indentation. If the space parameter is a number, then\n//          the indentation will be that many spaces.\n\n//          Example:\n\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}]);\n//          // text is '[\"e\",{\"pluribus\":\"unum\"}]'\n\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}], null, \"\\t\");\n//          // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\n\n//          text = JSON.stringify([new Date()], function (key, value) {\n//              return this[key] instanceof Date\n//                  ? \"Date(\" + this[key] + \")\"\n//                  : value;\n//          });\n//          // text is '[\"Date(---current time---)\"]'\n\n//      JSON.parse(text, reviver)\n//          This method parses a JSON text to produce an object or array.\n//          It can throw a SyntaxError exception.\n\n//          The optional reviver parameter is a function that can filter and\n//          transform the results. It receives each of the keys and values,\n//          and its return value is used instead of the original value.\n//          If it returns what it received, then the structure is not modified.\n//          If it returns undefined then the member is deleted.\n\n//          Example:\n\n//          // Parse the text. Values that look like ISO date strings will\n//          // be converted to Date objects.\n\n//          myData = JSON.parse(text, function (key, value) {\n//              var a;\n//              if (typeof value === \"string\") {\n//                  a =\n//   /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n//                  if (a) {\n//                      return new Date(Date.UTC(\n//                         +a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]\n//                      ));\n//                  }\n//                  return value;\n//              }\n//          });\n\n//          myData = JSON.parse(\n//              \"[\\\"Date(09/09/2001)\\\"]\",\n//              function (key, value) {\n//                  var d;\n//                  if (\n//                      typeof value === \"string\"\n//                      && value.slice(0, 5) === \"Date(\"\n//                      && value.slice(-1) === \")\"\n//                  ) {\n//                      d = new Date(value.slice(5, -1));\n//                      if (d) {\n//                          return d;\n//                      }\n//                  }\n//                  return value;\n//              }\n//          );\n\n//  This is a reference implementation. You are free to copy, modify, or\n//  redistribute.\n\n/*jslint\n    eval, for, this\n*/\n\n/*property\n    JSON, apply, call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/\n\n\n// Create a JSON object only if one does not already exist. We create the\n// methods in a closure to avoid creating global variables.\n\nif (typeof JSON !== \"object\") {\n    JSON = {};\n}\n\n(function () {\n    \"use strict\";\n\n    var rx_one = /^[\\],:{}\\s]*$/;\n    var rx_two = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\n    var rx_three = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\n    var rx_four = /(?:^|:|,)(?:\\s*\\[)+/g;\n    var rx_escapable = /[\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n    var rx_dangerous = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n\n    function f(n) {\n        // Format integers to have at least two digits.\n        return (n < 10)\n            ? \"0\" + n\n            : n;\n    }\n\n    function this_value() {\n        return this.valueOf();\n    }\n\n    if (typeof Date.prototype.toJSON !== \"function\") {\n\n        Date.prototype.toJSON = function () {\n\n            return isFinite(this.valueOf())\n                ? (\n                    this.getUTCFullYear()\n                    + \"-\"\n                    + f(this.getUTCMonth() + 1)\n                    + \"-\"\n                    + f(this.getUTCDate())\n                    + \"T\"\n                    + f(this.getUTCHours())\n                    + \":\"\n                    + f(this.getUTCMinutes())\n                    + \":\"\n                    + f(this.getUTCSeconds())\n                    + \"Z\"\n                )\n                : null;\n        };\n\n        Boolean.prototype.toJSON = this_value;\n        Number.prototype.toJSON = this_value;\n        String.prototype.toJSON = this_value;\n    }\n\n    var gap;\n    var indent;\n    var meta;\n    var rep;\n\n\n    function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n        rx_escapable.lastIndex = 0;\n        return rx_escapable.test(string)\n            ? \"\\\"\" + string.replace(rx_escapable, function (a) {\n                var c = meta[a];\n                return typeof c === \"string\"\n                    ? c\n                    : \"\\\\u\" + (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\n            }) + \"\\\"\"\n            : \"\\\"\" + string + \"\\\"\";\n    }\n\n\n    function str(key, holder) {\n\n// Produce a string from holder[key].\n\n        var i;          // The loop counter.\n        var k;          // The member key.\n        var v;          // The member value.\n        var length;\n        var mind = gap;\n        var partial;\n        var value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n        if (\n            value\n            && typeof value === \"object\"\n            && typeof value.toJSON === \"function\"\n        ) {\n            value = value.toJSON(key);\n        }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n        if (typeof rep === \"function\") {\n            value = rep.call(holder, key, value);\n        }\n\n// What happens next depends on the value's type.\n\n        switch (typeof value) {\n        case \"string\":\n            return quote(value);\n\n        case \"number\":\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n            return (isFinite(value))\n                ? String(value)\n                : \"null\";\n\n        case \"boolean\":\n        case \"null\":\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce \"null\". The case is included here in\n// the remote chance that this gets fixed someday.\n\n            return String(value);\n\n// If the type is \"object\", we might be dealing with an object or an array or\n// null.\n\n        case \"object\":\n\n// Due to a specification blunder in ECMAScript, typeof null is \"object\",\n// so watch out for that case.\n\n            if (!value) {\n                return \"null\";\n            }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n            gap += indent;\n            partial = [];\n\n// Is the value an array?\n\n            if (Object.prototype.toString.apply(value) === \"[object Array]\") {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || \"null\";\n                }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n                v = partial.length === 0\n                    ? \"[]\"\n                    : gap\n                        ? (\n                            \"[\\n\"\n                            + gap\n                            + partial.join(\",\\n\" + gap)\n                            + \"\\n\"\n                            + mind\n                            + \"]\"\n                        )\n                        : \"[\" + partial.join(\",\") + \"]\";\n                gap = mind;\n                return v;\n            }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n            if (rep && typeof rep === \"object\") {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    if (typeof rep[i] === \"string\") {\n                        k = rep[i];\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (\n                                (gap)\n                                    ? \": \"\n                                    : \":\"\n                            ) + v);\n                        }\n                    }\n                }\n            } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (\n                                (gap)\n                                    ? \": \"\n                                    : \":\"\n                            ) + v);\n                        }\n                    }\n                }\n            }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n            v = partial.length === 0\n                ? \"{}\"\n                : gap\n                    ? \"{\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"}\"\n                    : \"{\" + partial.join(\",\") + \"}\";\n            gap = mind;\n            return v;\n        }\n    }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n    if (typeof JSON.stringify !== \"function\") {\n        meta = {    // table of character substitutions\n            \"\\b\": \"\\\\b\",\n            \"\\t\": \"\\\\t\",\n            \"\\n\": \"\\\\n\",\n            \"\\f\": \"\\\\f\",\n            \"\\r\": \"\\\\r\",\n            \"\\\"\": \"\\\\\\\"\",\n            \"\\\\\": \"\\\\\\\\\"\n        };\n        JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n            var i;\n            gap = \"\";\n            indent = \"\";\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n            if (typeof space === \"number\") {\n                for (i = 0; i < space; i += 1) {\n                    indent += \" \";\n                }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n            } else if (typeof space === \"string\") {\n                indent = space;\n            }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n            rep = replacer;\n            if (replacer && typeof replacer !== \"function\" && (\n                typeof replacer !== \"object\"\n                || typeof replacer.length !== \"number\"\n            )) {\n                throw new Error(\"JSON.stringify\");\n            }\n\n// Make a fake root object containing our value under the key of \"\".\n// Return the result of stringifying the value.\n\n            return str(\"\", {\"\": value});\n        };\n    }\n\n\n// If the JSON object does not yet have a parse method, give it one.\n\n    if (typeof JSON.parse !== \"function\") {\n        JSON.parse = function (text, reviver) {\n\n// The parse method takes a text and an optional reviver function, and returns\n// a JavaScript value if the text is a valid JSON text.\n\n            var j;\n\n            function walk(holder, key) {\n\n// The walk method is used to recursively walk the resulting structure so\n// that modifications can be made.\n\n                var k;\n                var v;\n                var value = holder[key];\n                if (value && typeof value === \"object\") {\n                    for (k in value) {\n                        if (Object.prototype.hasOwnProperty.call(value, k)) {\n                            v = walk(value, k);\n                            if (v !== undefined) {\n                                value[k] = v;\n                            } else {\n                                delete value[k];\n                            }\n                        }\n                    }\n                }\n                return reviver.call(holder, key, value);\n            }\n\n\n// Parsing happens in four stages. In the first stage, we replace certain\n// Unicode characters with escape sequences. JavaScript handles many characters\n// incorrectly, either silently deleting them, or treating them as line endings.\n\n            text = String(text);\n            rx_dangerous.lastIndex = 0;\n            if (rx_dangerous.test(text)) {\n                text = text.replace(rx_dangerous, function (a) {\n                    return (\n                        \"\\\\u\"\n                        + (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4)\n                    );\n                });\n            }\n\n// In the second stage, we run the text against regular expressions that look\n// for non-JSON patterns. We are especially concerned with \"()\" and \"new\"\n// because they can cause invocation, and \"=\" because it can cause mutation.\n// But just to be safe, we want to reject all unexpected forms.\n\n// We split the second stage into 4 regexp operations in order to work around\n// crippling inefficiencies in IE's and Safari's regexp engines. First we\n// replace the JSON backslash pairs with \"@\" (a non-JSON character). Second, we\n// replace all simple value tokens with \"]\" characters. Third, we delete all\n// open brackets that follow a colon or comma or that begin the text. Finally,\n// we look to see that the remaining characters are only whitespace or \"]\" or\n// \",\" or \":\" or \"{\" or \"}\". If that is so, then the text is safe for eval.\n\n            if (\n                rx_one.test(\n                    text\n                        .replace(rx_two, \"@\")\n                        .replace(rx_three, \"]\")\n                        .replace(rx_four, \"\")\n                )\n            ) {\n\n// In the third stage we use the eval function to compile the text into a\n// JavaScript structure. The \"{\" operator is subject to a syntactic ambiguity\n// in JavaScript: it can begin a block or an object literal. We wrap the text\n// in parens to eliminate the ambiguity.\n\n                j = eval(\"(\" + text + \")\");\n\n// In the optional fourth stage, we recursively walk the new structure, passing\n// each name/value pair to a reviver function for possible transformation.\n\n                return (typeof reviver === \"function\")\n                    ? walk({\"\": j}, \"\")\n                    : j;\n            }\n\n// If the text is not JSON parseable, then a SyntaxError is thrown.\n\n            throw new SyntaxError(\"JSON.parse\");\n        };\n    }\n}());\n\n","//  json2.js\n//  2016-10-28\n//  Public Domain.\n//  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n//  See http://www.JSON.org/js.html\n//  This code should be minified before deployment.\n//  See http://javascript.crockford.com/jsmin.html\n\n//  USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n//  NOT CONTROL.\n\n//  This file creates a global JSON object containing two methods: stringify\n//  and parse. This file provides the ES5 JSON capability to ES3 systems.\n//  If a project might run on IE8 or earlier, then this file should be included.\n//  This file does nothing on ES5 systems.\n\n//      JSON.stringify(value, replacer, space)\n//          value       any JavaScript value, usually an object or array.\n//          replacer    an optional parameter that determines how object\n//                      values are stringified for objects. It can be a\n//                      function or an array of strings.\n//          space       an optional parameter that specifies the indentation\n//                      of nested structures. If it is omitted, the text will\n//                      be packed without extra whitespace. If it is a number,\n//                      it will specify the number of spaces to indent at each\n//                      level. If it is a string (such as \"\\t\" or \"&nbsp;\"),\n//                      it contains the characters used to indent at each level.\n//          This method produces a JSON text from a JavaScript value.\n//          When an object value is found, if the object contains a toJSON\n//          method, its toJSON method will be called and the result will be\n//          stringified. A toJSON method does not serialize: it returns the\n//          value represented by the name/value pair that should be serialized,\n//          or undefined if nothing should be serialized. The toJSON method\n//          will be passed the key associated with the value, and this will be\n//          bound to the value.\n\n//          For example, this would serialize Dates as ISO strings.\n\n//              Date.prototype.toJSON = function (key) {\n//                  function f(n) {\n//                      // Format integers to have at least two digits.\n//                      return (n < 10)\n//                          ? \"0\" + n\n//                          : n;\n//                  }\n//                  return this.getUTCFullYear()   + \"-\" +\n//                       f(this.getUTCMonth() + 1) + \"-\" +\n//                       f(this.getUTCDate())      + \"T\" +\n//                       f(this.getUTCHours())     + \":\" +\n//                       f(this.getUTCMinutes())   + \":\" +\n//                       f(this.getUTCSeconds())   + \"Z\";\n//              };\n\n//          You can provide an optional replacer method. It will be passed the\n//          key and value of each member, with this bound to the containing\n//          object. The value that is returned from your method will be\n//          serialized. If your method returns undefined, then the member will\n//          be excluded from the serialization.\n\n//          If the replacer parameter is an array of strings, then it will be\n//          used to select the members to be serialized. It filters the results\n//          such that only members with keys listed in the replacer array are\n//          stringified.\n\n//          Values that do not have JSON representations, such as undefined or\n//          functions, will not be serialized. Such values in objects will be\n//          dropped; in arrays they will be replaced with null. You can use\n//          a replacer function to replace those with JSON values.\n\n//          JSON.stringify(undefined) returns undefined.\n\n//          The optional space parameter produces a stringification of the\n//          value that is filled with line breaks and indentation to make it\n//          easier to read.\n\n//          If the space parameter is a non-empty string, then that string will\n//          be used for indentation. If the space parameter is a number, then\n//          the indentation will be that many spaces.\n\n//          Example:\n\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}]);\n//          // text is '[\"e\",{\"pluribus\":\"unum\"}]'\n\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}], null, \"\\t\");\n//          // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\n\n//          text = JSON.stringify([new Date()], function (key, value) {\n//              return this[key] instanceof Date\n//                  ? \"Date(\" + this[key] + \")\"\n//                  : value;\n//          });\n//          // text is '[\"Date(---current time---)\"]'\n\n//      JSON.parse(text, reviver)\n//          This method parses a JSON text to produce an object or array.\n//          It can throw a SyntaxError exception.\n\n//          The optional reviver parameter is a function that can filter and\n//          transform the results. It receives each of the keys and values,\n//          and its return value is used instead of the original value.\n//          If it returns what it received, then the structure is not modified.\n//          If it returns undefined then the member is deleted.\n\n//          Example:\n\n//          // Parse the text. Values that look like ISO date strings will\n//          // be converted to Date objects.\n\n//          myData = JSON.parse(text, function (key, value) {\n//              var a;\n//              if (typeof value === \"string\") {\n//                  a =\n//   /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n//                  if (a) {\n//                      return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\n//                          +a[5], +a[6]));\n//                  }\n//              }\n//              return value;\n//          });\n\n//          myData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {\n//              var d;\n//              if (typeof value === \"string\" &&\n//                      value.slice(0, 5) === \"Date(\" &&\n//                      value.slice(-1) === \")\") {\n//                  d = new Date(value.slice(5, -1));\n//                  if (d) {\n//                      return d;\n//                  }\n//              }\n//              return value;\n//          });\n\n//  This is a reference implementation. You are free to copy, modify, or\n//  redistribute.\n\n/*jslint\n    eval, for, this\n*/\n\n/*property\n    JSON, apply, call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\n    test, toJSON, toString, valueOf\n*/\n\n\n// Create a JSON object only if one does not already exist. We create the\n// methods in a closure to avoid creating global variables.\n\nif (typeof JSON !== \"object\") {\n    JSON = {};\n}\n\n(function () {\n    \"use strict\";\n\n    var rx_one = /^[\\],:{}\\s]*$/;\n    var rx_two = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\n    var rx_three = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\n    var rx_four = /(?:^|:|,)(?:\\s*\\[)+/g;\n    var rx_escapable = /[\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n    var rx_dangerous = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n\n    function f(n) {\n        // Format integers to have at least two digits.\n        return n < 10\n            ? \"0\" + n\n            : n;\n    }\n\n    function this_value() {\n        return this.valueOf();\n    }\n\n    if (typeof Date.prototype.toJSON !== \"function\") {\n\n        Date.prototype.toJSON = function () {\n\n            return isFinite(this.valueOf())\n                ? this.getUTCFullYear() + \"-\" +\n                        f(this.getUTCMonth() + 1) + \"-\" +\n                        f(this.getUTCDate()) + \"T\" +\n                        f(this.getUTCHours()) + \":\" +\n                        f(this.getUTCMinutes()) + \":\" +\n                        f(this.getUTCSeconds()) + \"Z\"\n                : null;\n        };\n\n        Boolean.prototype.toJSON = this_value;\n        Number.prototype.toJSON = this_value;\n        String.prototype.toJSON = this_value;\n    }\n\n    var gap;\n    var indent;\n    var meta;\n    var rep;\n\n\n    function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n        rx_escapable.lastIndex = 0;\n        return rx_escapable.test(string)\n            ? \"\\\"\" + string.replace(rx_escapable, function (a) {\n                var c = meta[a];\n                return typeof c === \"string\"\n                    ? c\n                    : \"\\\\u\" + (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\n            }) + \"\\\"\"\n            : \"\\\"\" + string + \"\\\"\";\n    }\n\n\n    function str(key, holder) {\n\n// Produce a string from holder[key].\n\n        var i;          // The loop counter.\n        var k;          // The member key.\n        var v;          // The member value.\n        var length;\n        var mind = gap;\n        var partial;\n        var value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n        if (value && typeof value === \"object\" &&\n                typeof value.toJSON === \"function\") {\n            value = value.toJSON(key);\n        }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n        if (typeof rep === \"function\") {\n            value = rep.call(holder, key, value);\n        }\n\n// What happens next depends on the value's type.\n\n        switch (typeof value) {\n        case \"string\":\n            return quote(value);\n\n        case \"number\":\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n            return isFinite(value)\n                ? String(value)\n                : \"null\";\n\n        case \"boolean\":\n        case \"null\":\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce \"null\". The case is included here in\n// the remote chance that this gets fixed someday.\n\n            return String(value);\n\n// If the type is \"object\", we might be dealing with an object or an array or\n// null.\n\n        case \"object\":\n\n// Due to a specification blunder in ECMAScript, typeof null is \"object\",\n// so watch out for that case.\n\n            if (!value) {\n                return \"null\";\n            }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n            gap += indent;\n            partial = [];\n\n// Is the value an array?\n\n            if (Object.prototype.toString.apply(value) === \"[object Array]\") {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || \"null\";\n                }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n                v = partial.length === 0\n                    ? \"[]\"\n                    : gap\n                        ? \"[\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"]\"\n                        : \"[\" + partial.join(\",\") + \"]\";\n                gap = mind;\n                return v;\n            }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n            if (rep && typeof rep === \"object\") {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    if (typeof rep[i] === \"string\") {\n                        k = rep[i];\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (\n                                gap\n                                    ? \": \"\n                                    : \":\"\n                            ) + v);\n                        }\n                    }\n                }\n            } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (\n                                gap\n                                    ? \": \"\n                                    : \":\"\n                            ) + v);\n                        }\n                    }\n                }\n            }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n            v = partial.length === 0\n                ? \"{}\"\n                : gap\n                    ? \"{\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"}\"\n                    : \"{\" + partial.join(\",\") + \"}\";\n            gap = mind;\n            return v;\n        }\n    }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n    if (typeof JSON.stringify !== \"function\") {\n        meta = {    // table of character substitutions\n            \"\\b\": \"\\\\b\",\n            \"\\t\": \"\\\\t\",\n            \"\\n\": \"\\\\n\",\n            \"\\f\": \"\\\\f\",\n            \"\\r\": \"\\\\r\",\n            \"\\\"\": \"\\\\\\\"\",\n            \"\\\\\": \"\\\\\\\\\"\n        };\n        JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n            var i;\n            gap = \"\";\n            indent = \"\";\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n            if (typeof space === \"number\") {\n                for (i = 0; i < space; i += 1) {\n                    indent += \" \";\n                }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n            } else if (typeof space === \"string\") {\n                indent = space;\n            }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n            rep = replacer;\n            if (replacer && typeof replacer !== \"function\" &&\n                    (typeof replacer !== \"object\" ||\n                    typeof replacer.length !== \"number\")) {\n                throw new Error(\"JSON.stringify\");\n            }\n\n// Make a fake root object containing our value under the key of \"\".\n// Return the result of stringifying the value.\n\n            return str(\"\", {\"\": value});\n        };\n    }\n\n\n// If the JSON object does not yet have a parse method, give it one.\n\n    if (typeof JSON.parse !== \"function\") {\n        JSON.parse = function (text, reviver) {\n\n// The parse method takes a text and an optional reviver function, and returns\n// a JavaScript value if the text is a valid JSON text.\n\n            var j;\n\n            function walk(holder, key) {\n\n// The walk method is used to recursively walk the resulting structure so\n// that modifications can be made.\n\n                var k;\n                var v;\n                var value = holder[key];\n                if (value && typeof value === \"object\") {\n                    for (k in value) {\n                        if (Object.prototype.hasOwnProperty.call(value, k)) {\n                            v = walk(value, k);\n                            if (v !== undefined) {\n                                value[k] = v;\n                            } else {\n                                delete value[k];\n                            }\n                        }\n                    }\n                }\n                return reviver.call(holder, key, value);\n            }\n\n\n// Parsing happens in four stages. In the first stage, we replace certain\n// Unicode characters with escape sequences. JavaScript handles many characters\n// incorrectly, either silently deleting them, or treating them as line endings.\n\n            text = String(text);\n            rx_dangerous.lastIndex = 0;\n            if (rx_dangerous.test(text)) {\n                text = text.replace(rx_dangerous, function (a) {\n                    return \"\\\\u\" +\n                            (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\n                });\n            }\n\n// In the second stage, we run the text against regular expressions that look\n// for non-JSON patterns. We are especially concerned with \"()\" and \"new\"\n// because they can cause invocation, and \"=\" because it can cause mutation.\n// But just to be safe, we want to reject all unexpected forms.\n\n// We split the second stage into 4 regexp operations in order to work around\n// crippling inefficiencies in IE's and Safari's regexp engines. First we\n// replace the JSON backslash pairs with \"@\" (a non-JSON character). Second, we\n// replace all simple value tokens with \"]\" characters. Third, we delete all\n// open brackets that follow a colon or comma or that begin the text. Finally,\n// we look to see that the remaining characters are only whitespace or \"]\" or\n// \",\" or \":\" or \"{\" or \"}\". If that is so, then the text is safe for eval.\n\n            if (\n                rx_one.test(\n                    text\n                        .replace(rx_two, \"@\")\n                        .replace(rx_three, \"]\")\n                        .replace(rx_four, \"\")\n                )\n            ) {\n\n// In the third stage we use the eval function to compile the text into a\n// JavaScript structure. The \"{\" operator is subject to a syntactic ambiguity\n// in JavaScript: it can begin a block or an object literal. We wrap the text\n// in parens to eliminate the ambiguity.\n\n                j = eval(\"(\" + text + \")\");\n\n// In the optional fourth stage, we recursively walk the new structure, passing\n// each name/value pair to a reviver function for possible transformation.\n\n                return (typeof reviver === \"function\")\n                    ? walk({\"\": j}, \"\")\n                    : j;\n            }\n\n// If the text is not JSON parseable, then a SyntaxError is thrown.\n\n            throw new SyntaxError(\"JSON.parse\");\n        };\n    }\n}());\n","// https://github.com/KhaledElAnsari/String.prototype.padStart\nString.prototype.padStart = String.prototype.padStart ? String.prototype.padStart : function(targetLength, padString) {\n    targetLength = Math.floor(targetLength) || 0;\n    if(targetLength < this.length) return String(this);\n\n    padString = padString ? String(padString) : \" \";\n\n    var pad = \"\";\n    var len = targetLength - this.length;\n    var i = 0;\n    while(pad.length < len) {\n        if(!padString[i]) {\n            i = 0;\n        }\n        pad += padString[i];\n        i++;\n    }\n\n    return pad + String(this).slice(0);\n};\n\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = String.prototype.padStart;\n}","if (!Math.trunc) {\n    Math.trunc = function(v) {\n      v = +v;\n      if (!isFinite(v)) return v;\n  \n      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);\n  \n      // returns:\n      //  0        ->  0\n      // -0        -> -0\n      //  0.2      ->  0\n      // -0.2      -> -0\n      //  0.7      ->  0\n      // -0.7      -> -0\n      //  Infinity ->  Infinity\n      // -Infinity -> -Infinity\n      //  NaN      ->  NaN\n      //  null     ->  0\n    };\n  }\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import 'extendscript-es5-shim';\nimport '../polyfill/json2';\nimport '../polyfill/padStart';// padstart polyfill\nimport '../polyfill/trunc';\nimport getDocumentData from './getDocuments';\nimport report from './log';\n\nreport.log('hello');\n\nconst greeting:(msg:string)=>void = (msg) => {\n    report.log('greeting');\n    alert(msg);\n};\n\ntype GreedArg = {\n  func: 'greeting',\n  msg: string\n}\n\ntype GetDocumentData = {\n  func: 'getDocuments',\n}\n\nexport type HostScriptArg = GreedArg|GetDocumentData;\n\n/**\n * this is function on top level scope.\n * any function must not be declared on global scope.\n * @param {HostScriptArg} arg \n * @returns {boolean|string}\n * branch to each local function.\n */\nconst switchFuncs:(arg:HostScriptArg)=>boolean|string = arg => {\n  report.log(arg.func);\n  switch(arg.func){\n    case 'greeting':\n      greeting(arg.msg);\n      return true;\n\n    case 'getDocuments':\n      return JSON.stringify(getDocumentData());\n\n    default:\n      return false;\n  }\n};\n\n/**\n * I just declared this function on global scope as a example of code.\n * but you are not supposed to declare like this funciton on global scope.\n */\nconst doSomething = (msg) => {\n  $.level = 1;\n  report.log('doing');\n  report.log(msg);\n  alert('good day');\n};\n\nconst test = () => {\n  const n = '5';\n  report.log(100);\n  report.log(n.padStart(2, '0'));\n  report.log(Math.trunc(13.2343));\n}\n\n/*\ndeclared in global scope\nbecause it must be called from CEP panel.\nexcept functions below, webpack covers any variable, function, object under local scope.\n*/\n$.global.doSomething = doSomething;\n$.global.switchFuncs = switchFuncs;\n$.global.test = test;\n"],"names":["getLayers","activeDoc","layers","l","length","type","name","getDocumentData","docs","documents","app","i","activeDocument","report","log","v","DEBUG","Array","isArray","forEach","n","$","writeln","inspectObj","obj","p","e","greeting","msg","alert","switchFuncs","arg","func","JSON","stringify","doSomething","level","test","padStart","Math","trunc","global"],"sourceRoot":""}